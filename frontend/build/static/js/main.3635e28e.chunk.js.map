{"version":3,"sources":["components/CartridgesTable/CartridgesTable.jsx","components/SuppliesTable/SuppliesTable.jsx","components/SuppliesEditable/localization.js","components/OrdersTable/FinishedStatus.jsx","components/OrdersTable/InWorkStatus.jsx","components/OrdersTable/OrdersTable.jsx","components/SuppliesEditable/SuppliesEditable.jsx","components/NavBar/NavBar.jsx","api/api.js","api/orderDao.js","api/supplyDao.js","api/cartridgeDao.js","pages/Home.jsx","pages/Test.jsx","App.js","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","theme","root","borderTop","tables","borderSize","borderTopColor","palette","primary","light","borderTopStyle","header","backgroundColor","dark","color","common","white","CartridgesTable","props","classes","cartridges","TableContainer","className","component","Paper","elevation","useTheme","Table","aria-label","TableHead","TableRow","TableCell","align","TableBody","map","row","key","name","scope","manufacturer","count","withStyles","head","outRow","error","inRow","success","localization","pagination","labelDisplayedRows","labelRowsSelect","toolbar","nRowsSelected","searchTooltip","searchPlaceholder","exportTitle","exportAriaLabel","exportName","actions","body","emptyDataSourceMessage","addTooltip","deleteTooltip","editTooltip","filterRow","filterTooltip","editRow","deleteText","cancelTooltip","saveTooltip","FinishedStatus","Tooltip","title","CheckCircle","InWorkStatus","LocalShipping","OrdersTable","data","cartridgesChoices","forEach","item","columns","field","initialEditValue","lookup","true","false","render","rowData","finished","type","editable","emptyValue","components","Container","options","exportButton","actionsColumnIndex","icon","tooltip","disabled","onClick","event","console","log","alert","number","onRowAdd","newData","Promise","resolve","onRowUpdate","onRowDelete","oldData","prepareData","supply","out","SuppliesEditable","handleSupplyDelete","handleSupplyUpdate","handleSupplyCreate","rowStyles","tinycolor","lighten","rowStyle","id","flexGrow","NavBar","history","useHistory","AppBar","position","Toolbar","variant","Typography","arrow","IconButton","push","Http","fontSize","SupervisedUserCircle","api","axios","create","baseURL","responseType","ordersDao","getAll","a","get","response","order","post","catch","reason","update","put","delete","supplyDao","supplies","cartridgeDao","Home","state","cartridgesData","suppliesData","ordersData","handleRefresh","orders","setState","this","Grid","container","spacing","xs","lg","Component","Test","App","navbarTitle","responsiveFontSizes","createMuiTheme","blue","secondary","green","style","paddingTop","maxWidth","path","exact","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","message"],"mappings":"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","file":"static/js/main.3635e28e.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nimport {\r\n    TableContainer,\r\n    Table,\r\n    TableHead,\r\n    TableRow,\r\n    TableCell,\r\n    TableBody,\r\n    Paper,\r\n} from \"@material-ui/core\";\r\n\r\nimport { makeStyles, useTheme } from \"@material-ui/core/styles\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        borderTop: theme.tables.borderSize,\r\n        borderTopColor: theme.palette.primary.light,\r\n        borderTopStyle: \"solid\",\r\n    },\r\n    header: {\r\n        backgroundColor: theme.palette.primary.dark,\r\n        color: theme.palette.common.white,\r\n    },\r\n}));\r\n\r\nfunction CartridgesTable(props) {\r\n    const classes = useStyles();\r\n    const { cartridges } = props;\r\n\r\n    return (\r\n        <TableContainer\r\n            className={classes.root}\r\n            component={Paper}\r\n            elevation={useTheme().tables.elevation}>\r\n            <Table aria-label=\"cartridges table\">\r\n                <TableHead>\r\n                    <TableRow>\r\n                        <TableCell>Производитель</TableCell>\r\n                        <TableCell align=\"right\">Наименование</TableCell>\r\n                        <TableCell align=\"right\">Количество</TableCell>\r\n                    </TableRow>\r\n                </TableHead>\r\n                <TableBody>\r\n                    {cartridges.map((row) => (\r\n                        <TableRow key={row.name}>\r\n                            <TableCell component=\"th\" scope=\"row\">\r\n                                {row.manufacturer}\r\n                            </TableCell>\r\n                            <TableCell align=\"right\">{row.name}</TableCell>\r\n                            <TableCell align=\"right\">{row.count}</TableCell>\r\n                        </TableRow>\r\n                    ))}\r\n                </TableBody>\r\n            </Table>\r\n        </TableContainer>\r\n    );\r\n}\r\n\r\nexport default CartridgesTable;\r\n","import React from \"react\";\r\n\r\nimport {\r\n  TableContainer,\r\n  Table,\r\n  TableHead,\r\n  TableBody,\r\n  TableRow,\r\n  TableCell,\r\n  Paper,\r\n} from \"@material-ui/core\";\r\n\r\nimport { withStyles, makeStyles } from \"@material-ui/core/styles\";\r\n\r\nconst StyledTableCell = withStyles((theme) => ({\r\n  head: {\r\n    backgroundColor: theme.palette.primary.dark,\r\n    color: theme.palette.common.white,\r\n  },\r\n}))(TableCell);\r\n\r\n// const StyledTableRow = withStyles((theme) => ({\r\n//   root: {\r\n//     \"&:nth-of-type(odd)\": {\r\n//       backgroundColor: theme.palette.action.hover,\r\n//     },\r\n//   },\r\n// }))(TableRow);\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  outRow: {\r\n    backgroundColor: theme.palette.error.light,\r\n    color: theme.palette.common.white,\r\n  },\r\n  inRow: {\r\n    backgroundColor: theme.palette.success.light,\r\n  },\r\n}));\r\n\r\nexport default function SuppliesTable(props) {\r\n  const classes = useStyles();\r\n  const { supplies } = props;\r\n  const eleveation = props.elevation ? props.elevation : 5;\r\n\r\n  return (\r\n    <TableContainer component={Paper} elevation={eleveation}>\r\n      <Table aria-label=\"cartridges table\">\r\n        <TableHead>\r\n          <TableRow>\r\n            <StyledTableCell>Время</StyledTableCell>\r\n            <StyledTableCell align=\"right\">Наименование</StyledTableCell>\r\n            <StyledTableCell align=\"right\">Количество</StyledTableCell>\r\n            <StyledTableCell align=\"right\">Комментарий</StyledTableCell>\r\n          </TableRow>\r\n        </TableHead>\r\n        <TableBody>\r\n          {supplies.map((row) => (\r\n            <TableRow\r\n              key={row.id}\r\n              className={row.out ? classes.outRow : classes.inRow}\r\n            >\r\n              <TableCell component=\"th\" scope=\"row\">\r\n                {row.date}\r\n              </TableCell>\r\n              <TableCell align=\"right\">{row.cartridge_str}</TableCell>\r\n              <TableCell align=\"right\">\r\n                {row.out ? row.count * -1 : row.count}\r\n              </TableCell>\r\n              <TableCell align=\"right\">{row.comment}</TableCell>\r\n            </TableRow>\r\n          ))}\r\n        </TableBody>\r\n      </Table>\r\n    </TableContainer>\r\n  );\r\n}\r\n","const localization = {\r\n    pagination: {\r\n        labelDisplayedRows: \"{from}-{to} из {count}\",\r\n        labelRowsSelect: \"строк\",\r\n    },\r\n    toolbar: {\r\n        nRowsSelected: \"{0} перемещение(ий) выбрано\",\r\n        searchTooltip: \"Поиск\",\r\n        searchPlaceholder: \"Поиск\",\r\n        exportTitle: \"Экспорт\",\r\n        exportAriaLabel: \"Экспорт\",\r\n        exportName: \"Экспортировать в CSV\",\r\n    },\r\n    header: {\r\n        actions: \"Действия\",\r\n    },\r\n    body: {\r\n        emptyDataSourceMessage: \"Перемещения отсутствуют\",\r\n        addTooltip: \"Добавить\",\r\n        deleteTooltip: \"Удалить\",\r\n        editTooltip: \"Редактировать\",\r\n        filterRow: {\r\n            filterTooltip: \"Фильтр\",\r\n        },\r\n        editRow: {\r\n            deleteText: \"Удалить перемещение?\",\r\n            cancelTooltip: \"Отмена\",\r\n            saveTooltip: \"Подтвердить\",\r\n        },\r\n    },\r\n};\r\n\r\nexport default localization;\r\n","import React from \"react\";\r\n\r\nimport { CheckCircle } from \"@material-ui/icons\";\r\nimport { Tooltip } from \"@material-ui/core\";\r\n\r\nfunction FinishedStatus() {\r\n    return (\r\n        <Tooltip title=\"Завершён\" aria-label=\"Завершён\">\r\n            <CheckCircle color=\"secondary\" />\r\n        </Tooltip>\r\n    );\r\n}\r\n\r\nexport default FinishedStatus;\r\n","import React from \"react\";\r\n\r\nimport { LocalShipping } from \"@material-ui/icons\";\r\nimport { Tooltip } from \"@material-ui/core\";\r\n\r\nfunction InWorkStatus() {\r\n    return (\r\n        <Tooltip title=\"В работе\" aria-label=\"В работе\">\r\n            <LocalShipping />\r\n        </Tooltip>\r\n    );\r\n}\r\n\r\nexport default InWorkStatus;\r\n","import React from \"react\";\r\nimport { makeStyles, useTheme } from \"@material-ui/core/styles\";\r\n\r\nimport { Paper } from \"@material-ui/core\";\r\nimport { DoneAll, CheckCircle, LocalShipping } from \"@material-ui/icons\";\r\n\r\nimport MaterialTable from \"material-table\";\r\nimport localization from \"../SuppliesEditable/localization\";\r\nimport FinishedStatus from \"./FinishedStatus\";\r\nimport InWorkStatus from \"./InWorkStatus\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        borderTop: theme.tables.borderSize,\r\n        borderTopColor: theme.palette.primary.light,\r\n        borderTopStyle: \"solid\",\r\n    },\r\n}));\r\n\r\nfunction OrdersTable({ data, cartridges }) {\r\n    const classes = useStyles();\r\n\r\n    let cartridgesChoices = {};\r\n    cartridges.forEach(\r\n        (item) =>\r\n            (cartridgesChoices[item.name] = `${item.manufacturer} ${item.name}`)\r\n    );\r\n\r\n    return (\r\n        <MaterialTable\r\n            title=\"Заказы\"\r\n            localization={localization}\r\n            columns={[\r\n                {\r\n                    title: \"Статус\",\r\n                    field: \"finished\",\r\n                    // editable: \"onUpdate\",\r\n                    initialEditValue: \"false\",\r\n                    lookup: {\r\n                        true: \"Завершён\",\r\n                        false: \"В работе\",\r\n                    },\r\n                    render: (rowData) =>\r\n                        rowData.finished ? (\r\n                            <FinishedStatus />\r\n                        ) : (\r\n                            <InWorkStatus />\r\n                        ),\r\n                },\r\n                {\r\n                    title: \"Дата создания\",\r\n                    field: \"date\",\r\n                    type: \"datetime\",\r\n                    editable: \"never\",\r\n                },\r\n                {\r\n                    title: \"Дата завершения\",\r\n                    field: \"date_finished\",\r\n                    type: \"datetime\",\r\n                    editable: \"never\",\r\n                    emptyValue: \"—\",\r\n                },\r\n                {\r\n                    title: \"Номер\",\r\n                    field: \"number\",\r\n                    type: \"numeric\",\r\n                    emptyValue: \"Не определён\",\r\n                },\r\n                {\r\n                    title: \"Картридж\",\r\n                    field: \"cartridge\",\r\n                    lookup: cartridgesChoices,\r\n                },\r\n                {\r\n                    title: \"Количество\",\r\n                    field: \"count\",\r\n                    type: \"numeric\",\r\n                },\r\n            ]}\r\n            data={data}\r\n            components={{\r\n                Container: (props) => (\r\n                    <Paper\r\n                        {...props}\r\n                        elevation={useTheme().tables.elevation}\r\n                        className={classes.root}\r\n                    />\r\n                ),\r\n            }}\r\n            options={{\r\n                exportButton: true,\r\n                actionsColumnIndex: -1,\r\n            }}\r\n            actions={[\r\n                (rowData) => ({\r\n                    icon: \"check\",\r\n                    tooltip: rowData.finished\r\n                        ? \"Заказ уже завершён\"\r\n                        : \"Завершить заказ\",\r\n                    disabled: rowData.finished,\r\n                    onClick: (event, rowData) => {\r\n                        console.log(event, rowData);\r\n                        if (!rowData.finished) {\r\n                            alert(`Заказ ${rowData.number} выполнен`);\r\n                        } else {\r\n                            alert(\r\n                                `Заказ ${rowData.number} уже является выполненным`\r\n                            );\r\n                        }\r\n                    },\r\n                }),\r\n            ]}\r\n            editable={{\r\n                onRowAdd: (newData) =>\r\n                    new Promise((resolve) => {\r\n                        console.log(newData);\r\n                        resolve();\r\n                    }),\r\n                onRowUpdate: (newData) =>\r\n                    new Promise((resolve) => {\r\n                        console.log(newData);\r\n                        resolve();\r\n                    }),\r\n                onRowDelete: (oldData) =>\r\n                    new Promise((resolve) => {\r\n                        console.log(oldData);\r\n                        resolve();\r\n                    }),\r\n            }}\r\n        />\r\n    );\r\n}\r\n\r\nexport default OrdersTable;\r\n","import React from \"react\";\r\nimport { makeStyles, useTheme } from \"@material-ui/core/styles\";\r\n\r\nimport { Paper } from \"@material-ui/core\";\r\n\r\nimport tinycolor from \"tinycolor2\";\r\n\r\nimport MaterialTable from \"material-table\";\r\nimport localization from \"./localization\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        borderTop: theme.tables.borderSize,\r\n        borderTopColor: theme.palette.primary.light,\r\n        borderTopStyle: \"solid\",\r\n    },\r\n}));\r\n\r\nconst prepareData = (supply) => {\r\n    supply.out = supply.out === \"true\" || supply.out === true ? true : false;\r\n    return supply;\r\n};\r\n\r\nfunction SuppliesEditable(props) {\r\n    const {\r\n        cartridges,\r\n        handleSupplyDelete,\r\n        handleSupplyUpdate,\r\n        handleSupplyCreate,\r\n    } = props;\r\n\r\n    const classes = useStyles();\r\n    const theme = useTheme();\r\n\r\n    const rowStyles = {\r\n        outRow: {\r\n            backgroundColor: tinycolor(theme.palette.error.light).lighten(20),\r\n        },\r\n        inRow: {\r\n            backgroundColor: tinycolor(theme.palette.success.light).lighten(24),\r\n        },\r\n    };\r\n\r\n    let cartridgesChoices = {};\r\n    cartridges.forEach(\r\n        (item) =>\r\n            (cartridgesChoices[item.name] = `${item.manufacturer} ${item.name}`)\r\n    );\r\n\r\n    const columns = [\r\n        { title: \"Дата\", field: \"date\", type: \"datetime\", editable: \"never\" },\r\n        {\r\n            title: \"Событие\",\r\n            field: \"out\",\r\n            initialEditValue: \"true\",\r\n            lookup: { true: \"Выдача\", false: \"Поступление\" },\r\n        },\r\n        {\r\n            title: \"Картридж\",\r\n            field: \"cartridge\",\r\n            lookup: cartridgesChoices,\r\n        },\r\n        { title: \"Количество\", field: \"count\", type: \"numeric\" },\r\n        { title: \"Комментарий\", field: \"comment\" },\r\n    ];\r\n\r\n    return (\r\n        <MaterialTable\r\n            components={{\r\n                Container: (props) => (\r\n                    <Paper\r\n                        {...props}\r\n                        elevation={theme.tables.elevation}\r\n                        className={classes.root}\r\n                    />\r\n                ),\r\n            }}\r\n            localization={localization}\r\n            title=\"Перемещение Картриджей\"\r\n            columns={columns}\r\n            data={props.data}\r\n            options={{\r\n                exportButton: true,\r\n                actionsColumnIndex: -1,\r\n                // emptyRowsWhenPaging: true,\r\n                // paging: false,\r\n                rowStyle: (rowData) =>\r\n                    rowData.out ? rowStyles.outRow : rowStyles.inRow,\r\n            }}\r\n            editable={{\r\n                onRowAdd: (newData) =>\r\n                    new Promise((resolve) => {\r\n                        handleSupplyCreate(prepareData(newData));\r\n                        resolve();\r\n                    }),\r\n                onRowUpdate: (newData) =>\r\n                    new Promise((resolve) => {\r\n                        handleSupplyUpdate(prepareData(newData));\r\n                        resolve();\r\n                    }),\r\n                onRowDelete: (oldData) =>\r\n                    new Promise((resolve) => {\r\n                        handleSupplyDelete(oldData.id);\r\n                        resolve();\r\n                    }),\r\n            }}\r\n        />\r\n    );\r\n}\r\n\r\nexport default SuppliesEditable;\r\n","import React from \"react\";\r\nimport {\r\n    AppBar,\r\n    Toolbar,\r\n    Typography,\r\n    IconButton,\r\n    Button,\r\n    Tooltip,\r\n} from \"@material-ui/core\";\r\nimport { Http, SupervisedUserCircle } from \"@material-ui/icons\";\r\nimport { makeStyles, withStyles } from \"@material-ui/core/styles\";\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        flexGrow: 1,\r\n    },\r\n    title: {\r\n        flexGrow: 1,\r\n    },\r\n    // button: {\r\n    //     marginRight: theme.spacing(2),\r\n    // },\r\n}));\r\n\r\nfunction NavBar({ title }) {\r\n    const classes = useStyles();\r\n\r\n    const history = useHistory();\r\n\r\n    return (\r\n        <div>\r\n            <AppBar position=\"static\">\r\n                <Toolbar variant=\"regular\">\r\n                    <Typography\r\n                        className={classes.title}\r\n                        variant=\"h6\"\r\n                        color=\"inherit\">\r\n                        {title}\r\n                    </Typography>\r\n                    <Tooltip title=\"REST API\" arrow>\r\n                        <IconButton\r\n                            onClick={() => history.push(\"/api\")}\r\n                            color=\"inherit\"\r\n                            aria-label=\"REST\">\r\n                            <Http fontSize=\"large\" />\r\n                        </IconButton>\r\n                    </Tooltip>\r\n                    <Tooltip title=\"Админка\" arrow>\r\n                        <IconButton\r\n                            onClick={() => history.push(\"/admin\")}\r\n                            color=\"inherit\"\r\n                            aria-label=\"Admin\">\r\n                            <SupervisedUserCircle fontSize=\"large\" />\r\n                        </IconButton>\r\n                    </Tooltip>\r\n                    {/* <Button color=\"inherit\">\r\n                        <Tooltip title=\"REST API\">\r\n                            <Http />\r\n                        </Tooltip>\r\n                    </Button> */}\r\n                </Toolbar>\r\n            </AppBar>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default NavBar;\r\n","import axios from \"axios\";\r\n\r\nexport const api = axios.create({\r\n    baseURL: \"http://ps-bykrc.dellin.local/api/\",\r\n    // baseURL: \"http://127.0.0.1:8000/api/\",\r\n    responseType: \"json\",\r\n});\r\n","import { api } from \"./api\";\r\n\r\nexport const ordersDao = {\r\n    getAll: async () => {\r\n        const response = await api.get(\"orders/\");\r\n        console.log(\"supplyDao.getAll:\", response);\r\n        return response.data;\r\n    },\r\n    create: async (order) => {\r\n        api.post(`orders/`, order).catch((reason) => {\r\n            console.log(\"ordersDao: \", reason.response.data);\r\n        });\r\n        console.log(\"ordersDao.create:\", order);\r\n    },\r\n    update: async (order) => {\r\n        api.put(`orders/${order.id}/`, order);\r\n    },\r\n    delete: async (id) => {\r\n        api.delete(`orders/${id}/`);\r\n    },\r\n};\r\n","// import { createSupply, fetchSupplies, updateSupply, deleteSupply } from \"./\";\r\nimport { api } from \"./api\";\r\n\r\nexport const supplyDao = {\r\n    getAll: async () => {\r\n        const supplies = await api.get(\"supplies/\");\r\n        console.log(\"fetchSupplies:\", supplies);\r\n        return supplies.data;\r\n    },\r\n    create: async (supply) => {\r\n        api.post(`supplies/`, supply).catch((reason) => {\r\n            console.log(\"response: \", reason.response.data);\r\n        });\r\n        console.log(\"createSupply:\", supply);\r\n    },\r\n    update: async (supply) => {\r\n        api.put(`supplies/${supply.id}/`, supply);\r\n    },\r\n    delete: async (id) => {\r\n        api.delete(`supplies/${id}/`);\r\n    },\r\n};\r\n","import { api } from \"./api\";\r\n\r\nexport const cartridgeDao = {\r\n    getAll: async () => {\r\n        const response = await api.get(\"cartridges/\");\r\n        console.log(\"ordersDao.getAll:\", response);\r\n        return response.data;\r\n    },\r\n    // create: async (order) => {\r\n    //     api.post(`orders/`, order).catch((reason) => {\r\n    //         console.log(\"ordersDao: \", reason.response.data);\r\n    //     });\r\n    //     console.log(\"ordersDao.create:\", order);\r\n    // },\r\n    // update: async (order) => {\r\n    //     api.put(`orders/${order.id}/`, order);\r\n    // },\r\n    // delete: async (id) => {\r\n    //     api.delete(`orders/${id}/`);\r\n    // },\r\n};\r\n","import React, { Component } from \"react\";\r\n\r\nimport { Grid } from \"@material-ui/core\";\r\n\r\nimport { CartridesTable, SuppliesEditable, OrdersTable } from \"../components\";\r\nimport { ordersDao } from \"../api/orderDao\";\r\nimport { supplyDao } from \"../api/supplyDao\";\r\nimport { cartridgeDao } from \"../api/cartridgeDao\";\r\n\r\nexport class Home extends Component {\r\n    state = {\r\n        cartridgesData: [],\r\n        suppliesData: [],\r\n        ordersData: [],\r\n    };\r\n\r\n    handleRefresh = async () => {\r\n        const cartridges = await cartridgeDao.getAll();\r\n        const supplies = await supplyDao.getAll();\r\n        // const supplies = await fetchSupplies();\r\n        const orders = await ordersDao.getAll();\r\n        this.setState({\r\n            cartridgesData: cartridges,\r\n            suppliesData: supplies,\r\n            ordersData: orders,\r\n        });\r\n    };\r\n\r\n    handleSupplyDelete = async (id) => {\r\n        await supplyDao.delete(id);\r\n        await this.handleRefresh();\r\n        // this.props.enqueueSnackbar(`Перемещение №${id} удалено успешно!`);\r\n    };\r\n\r\n    handleSupplyCreate = async (supply) => {\r\n        await supplyDao.create(supply);\r\n        // await createSupply(supply);\r\n        await this.handleRefresh();\r\n        // this.props.enqueueSnackbar(`Перемещение №${id} удалено успешно!`);\r\n    };\r\n\r\n    handleSupplyUpdate = async (supply) => {\r\n        await supplyDao.update(supply);\r\n        await this.handleRefresh();\r\n        // this.props.enqueueSnackbar(`Перемещение №${id} удалено успешно!`);\r\n    };\r\n\r\n    async componentDidMount() {\r\n        await this.handleRefresh();\r\n    }\r\n\r\n    render() {\r\n        const { cartridgesData, suppliesData, ordersData } = this.state;\r\n\r\n        return (\r\n            <Grid container spacing={3}>\r\n                <Grid key=\"cartridges\" xs={12} lg={4} item>\r\n                    <CartridesTable cartridges={cartridgesData} />\r\n                </Grid>\r\n                <Grid key=\"supplies\" xs={12} lg={8} item>\r\n                    <SuppliesEditable\r\n                        data={suppliesData}\r\n                        cartridges={cartridgesData}\r\n                        handleSupplyDelete={this.handleSupplyDelete}\r\n                        handleSupplyCreate={this.handleSupplyCreate}\r\n                        handleSupplyUpdate={this.handleSupplyUpdate}\r\n                    />\r\n                </Grid>\r\n                <Grid key=\"orders\" xs={12} lg={12} item>\r\n                    <OrdersTable\r\n                        data={ordersData}\r\n                        cartridges={cartridgesData}\r\n                    />\r\n                </Grid>\r\n            </Grid>\r\n        );\r\n    }\r\n}\r\n","import React from \"react\";\r\n\r\nfunction Test() {\r\n    return (\r\n        <div>\r\n            <h1>Test page</h1>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Test;\r\n","import { BrowserRouter, Switch, Route } from \"react-router-dom\";\r\n\r\nimport { Container } from \"@material-ui/core\";\r\nimport {\r\n    MuiThemeProvider,\r\n    createMuiTheme,\r\n    responsiveFontSizes,\r\n} from \"@material-ui/core/styles\";\r\n\r\nimport { green, blue } from \"@material-ui/core/colors\";\r\n\r\nimport \"./App.css\";\r\n\r\nimport React, { Component } from \"react\";\r\n\r\nimport { NavBar } from \"./components\";\r\nimport { Home } from \"./pages/Home\";\r\nimport Test from \"./pages/Test\";\r\n\r\n// import styles from \"./App.css\";\r\n\r\nexport class App extends Component {\r\n    state = {\r\n        navbarTitle: \"РЦ Валищево • Картриджи\",\r\n        theme: responsiveFontSizes(\r\n            createMuiTheme({\r\n                palette: {\r\n                    // type: \"dark\",\r\n                    primary: blue,\r\n                    secondary: green,\r\n                },\r\n                tables: {\r\n                    borderSize: \"0.5rem\",\r\n                    elevation: 5,\r\n                },\r\n                // status: {\r\n                //   danger: \"orange\",\r\n                // },\r\n            })\r\n        ),\r\n    };\r\n\r\n    render() {\r\n        const { navbarTitle, theme } = this.state;\r\n\r\n        return (\r\n            <BrowserRouter>\r\n                <MuiThemeProvider theme={theme}>\r\n                    <NavBar title={navbarTitle} />\r\n                    <Container style={{ paddingTop: 5 + \"%\" }} maxWidth=\"lg\">\r\n                        <Switch>\r\n                            <Route path=\"/\" exact component={Home} />\r\n                            <Route path=\"/test\" exact component={Test} />\r\n                        </Switch>\r\n                    </Container>\r\n                </MuiThemeProvider>\r\n            </BrowserRouter>\r\n        );\r\n    }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  // <React.StrictMode>\n  <App />,\n  // </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}