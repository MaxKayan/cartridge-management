{"version":3,"sources":["components/CartridgesTable/CartridgesTable.jsx","components/SuppliesTable/SuppliesTable.jsx","components/SuppliesEditable/localization.js","components/OrdersTable/FinishedStatus.jsx","components/OrdersTable/InWorkStatus.jsx","components/OrdersTable/OrdersTable.jsx","components/SuppliesEditable/SuppliesEditable.jsx","components/NavBar/NavBar.jsx","components/Chat/Chat.jsx","pages/Test.jsx","api/api.js","api/CommonApi.js","api/index.js","pages/Home.jsx","App.js","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","theme","root","borderTop","tables","borderSize","borderTopColor","palette","primary","light","borderTopStyle","header","backgroundColor","dark","color","common","white","CartridgesTable","props","classes","cartridges","TableContainer","className","component","Paper","elevation","useTheme","Table","aria-label","TableHead","TableRow","TableCell","align","TableBody","map","row","key","name","scope","manufacturer","count","withStyles","head","outRow","error","inRow","success","localization","pagination","labelDisplayedRows","labelRowsSelect","toolbar","nRowsSelected","searchTooltip","searchPlaceholder","exportTitle","exportAriaLabel","exportName","actions","body","emptyDataSourceMessage","addTooltip","deleteTooltip","editTooltip","filterRow","filterTooltip","editRow","deleteText","cancelTooltip","saveTooltip","FinishedStatus","Tooltip","title","CheckCircle","InWorkStatus","LocalShipping","OrdersTable","data","handleCreate","handleUpdate","handleDelete","cartridgesChoices","forEach","item","isLoading","length","columns","field","initialEditValue","lookup","true","false","render","rowData","finished","type","editable","emptyValue","components","Container","options","exportButton","actionsColumnIndex","icon","tooltip","undefined","disabled","onClick","event","console","log","alert","number","onRowAdd","newData","Promise","resolve","onRowUpdate","onRowDelete","oldData","prepareData","supply","out","SuppliesEditable","handleSupplyDelete","handleSupplyUpdate","handleSupplyCreate","rowStyles","tinycolor","lighten","rowStyle","flexGrow","NavBar","history","useHistory","AppBar","position","Toolbar","variant","Typography","arrow","IconButton","push","window","location","reload","Http","fontSize","SupervisedUserCircle","Chat","state","user","ws","connectState","handleNewUserMessage","newMessage","send","JSON","stringify","message","connect","WebSocket","host","split","onmessage","e","parse","addResponseMessage","onopen","element","closeSnackbar","setState","Math","random","onclose","enqueueSnackbar","persist","preventDuplicate","action","Button","anchorOrigin","vertical","horizontal","onerror","err","close","this","subtitle","Component","withSnackbar","Test","api","axios","create","baseURL","responseType","CommonApi","path","messages","callbacks","instance","a","post","catch","reason","then","refreshAll","update","put","id","delete","get","response","fetchAll","Home","cartridgesData","suppliesData","ordersData","chatMessageHistory","displayActions","msg","handleRefresh","supplies","orders","chatMessage","supplyApi","value","orderApi","Grid","container","spacing","xs","CircularProgress","disableShrink","lg","App","navbarTitle","responsiveFontSizes","createMuiTheme","blue","secondary","green","notistackRef","React","createRef","onClickDismiss","current","ref","Close","style","paddingTop","maxWidth","exact","Boolean","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.917ded1e.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nimport {\r\n    TableContainer,\r\n    Table,\r\n    TableHead,\r\n    TableRow,\r\n    TableCell,\r\n    TableBody,\r\n    Paper,\r\n} from \"@material-ui/core\";\r\n\r\nimport { makeStyles, useTheme } from \"@material-ui/core/styles\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        borderTop: theme.tables.borderSize,\r\n        borderTopColor: theme.palette.primary.light,\r\n        borderTopStyle: \"solid\",\r\n    },\r\n    header: {\r\n        backgroundColor: theme.palette.primary.dark,\r\n        color: theme.palette.common.white,\r\n    },\r\n}));\r\n\r\nfunction CartridgesTable(props) {\r\n    const classes = useStyles();\r\n    const { cartridges } = props;\r\n\r\n    return (\r\n        <TableContainer\r\n            className={classes.root}\r\n            component={Paper}\r\n            elevation={useTheme().tables.elevation}>\r\n            <Table aria-label=\"cartridges table\">\r\n                <TableHead>\r\n                    <TableRow>\r\n                        <TableCell>Производитель</TableCell>\r\n                        <TableCell align=\"right\">Наименование</TableCell>\r\n                        <TableCell align=\"right\">Количество</TableCell>\r\n                    </TableRow>\r\n                </TableHead>\r\n                <TableBody>\r\n                    {cartridges.map((row) => (\r\n                        <TableRow key={row.name}>\r\n                            <TableCell component=\"th\" scope=\"row\">\r\n                                {row.manufacturer}\r\n                            </TableCell>\r\n                            <TableCell align=\"right\">{row.name}</TableCell>\r\n                            <TableCell align=\"right\">{row.count}</TableCell>\r\n                        </TableRow>\r\n                    ))}\r\n                </TableBody>\r\n            </Table>\r\n        </TableContainer>\r\n    );\r\n}\r\n\r\nexport default CartridgesTable;\r\n","import React from \"react\";\r\n\r\nimport {\r\n  TableContainer,\r\n  Table,\r\n  TableHead,\r\n  TableBody,\r\n  TableRow,\r\n  TableCell,\r\n  Paper,\r\n} from \"@material-ui/core\";\r\n\r\nimport { withStyles, makeStyles } from \"@material-ui/core/styles\";\r\n\r\nconst StyledTableCell = withStyles((theme) => ({\r\n  head: {\r\n    backgroundColor: theme.palette.primary.dark,\r\n    color: theme.palette.common.white,\r\n  },\r\n}))(TableCell);\r\n\r\n// const StyledTableRow = withStyles((theme) => ({\r\n//   root: {\r\n//     \"&:nth-of-type(odd)\": {\r\n//       backgroundColor: theme.palette.action.hover,\r\n//     },\r\n//   },\r\n// }))(TableRow);\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  outRow: {\r\n    backgroundColor: theme.palette.error.light,\r\n    color: theme.palette.common.white,\r\n  },\r\n  inRow: {\r\n    backgroundColor: theme.palette.success.light,\r\n  },\r\n}));\r\n\r\nexport default function SuppliesTable(props) {\r\n  const classes = useStyles();\r\n  const { supplies } = props;\r\n  const eleveation = props.elevation ? props.elevation : 5;\r\n\r\n  return (\r\n    <TableContainer component={Paper} elevation={eleveation}>\r\n      <Table aria-label=\"cartridges table\">\r\n        <TableHead>\r\n          <TableRow>\r\n            <StyledTableCell>Время</StyledTableCell>\r\n            <StyledTableCell align=\"right\">Наименование</StyledTableCell>\r\n            <StyledTableCell align=\"right\">Количество</StyledTableCell>\r\n            <StyledTableCell align=\"right\">Комментарий</StyledTableCell>\r\n          </TableRow>\r\n        </TableHead>\r\n        <TableBody>\r\n          {supplies.map((row) => (\r\n            <TableRow\r\n              key={row.id}\r\n              className={row.out ? classes.outRow : classes.inRow}\r\n            >\r\n              <TableCell component=\"th\" scope=\"row\">\r\n                {row.date}\r\n              </TableCell>\r\n              <TableCell align=\"right\">{row.cartridge_str}</TableCell>\r\n              <TableCell align=\"right\">\r\n                {row.out ? row.count * -1 : row.count}\r\n              </TableCell>\r\n              <TableCell align=\"right\">{row.comment}</TableCell>\r\n            </TableRow>\r\n          ))}\r\n        </TableBody>\r\n      </Table>\r\n    </TableContainer>\r\n  );\r\n}\r\n","const localization = {\r\n    pagination: {\r\n        labelDisplayedRows: \"{from}-{to} из {count}\",\r\n        labelRowsSelect: \"строк\",\r\n    },\r\n    toolbar: {\r\n        nRowsSelected: \"{0} перемещение(ий) выбрано\",\r\n        searchTooltip: \"Поиск\",\r\n        searchPlaceholder: \"Поиск\",\r\n        exportTitle: \"Экспорт\",\r\n        exportAriaLabel: \"Экспорт\",\r\n        exportName: \"Экспортировать в CSV\",\r\n    },\r\n    header: {\r\n        actions: \"Действия\",\r\n    },\r\n    body: {\r\n        emptyDataSourceMessage: \"Загрузка\",\r\n        addTooltip: \"Добавить\",\r\n        deleteTooltip: \"Удалить\",\r\n        editTooltip: \"Редактировать\",\r\n        filterRow: {\r\n            filterTooltip: \"Фильтр\",\r\n        },\r\n        editRow: {\r\n            deleteText: \"Удалить перемещение?\",\r\n            cancelTooltip: \"Отмена\",\r\n            saveTooltip: \"Подтвердить\",\r\n        },\r\n    },\r\n};\r\n\r\nexport default localization;\r\n","import React from \"react\";\r\n\r\nimport { CheckCircle } from \"@material-ui/icons\";\r\nimport { Tooltip } from \"@material-ui/core\";\r\n\r\nfunction FinishedStatus() {\r\n    return (\r\n        <Tooltip title=\"Завершён\" aria-label=\"Завершён\">\r\n            <CheckCircle color=\"secondary\" />\r\n        </Tooltip>\r\n    );\r\n}\r\n\r\nexport default FinishedStatus;\r\n","import React from \"react\";\r\n\r\nimport { LocalShipping } from \"@material-ui/icons\";\r\nimport { Tooltip } from \"@material-ui/core\";\r\n\r\nfunction InWorkStatus() {\r\n    return (\r\n        <Tooltip title=\"В работе\" aria-label=\"В работе\">\r\n            <LocalShipping />\r\n        </Tooltip>\r\n    );\r\n}\r\n\r\nexport default InWorkStatus;\r\n","import React from \"react\";\r\nimport { makeStyles, useTheme } from \"@material-ui/core/styles\";\r\n\r\nimport { Paper } from \"@material-ui/core\";\r\n// import { DoneAll, CheckCircle, LocalShipping } from \"@material-ui/icons\";\r\n\r\nimport MaterialTable from \"material-table\";\r\nimport localization from \"../SuppliesEditable/localization\";\r\nimport FinishedStatus from \"./FinishedStatus\";\r\nimport InWorkStatus from \"./InWorkStatus\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        borderTop: theme.tables.borderSize,\r\n        borderTopColor: theme.palette.primary.light,\r\n        borderTopStyle: \"solid\",\r\n    },\r\n}));\r\n\r\nfunction OrdersTable({\r\n    data,\r\n    cartridges,\r\n    handleCreate,\r\n    handleUpdate,\r\n    handleDelete,\r\n}) {\r\n    const classes = useStyles();\r\n\r\n    // const { enqueueSnackbar, closeSnackbar } = useSnackbar();\r\n\r\n    let cartridgesChoices = {};\r\n    cartridges.forEach(\r\n        (item) =>\r\n            (cartridgesChoices[item.name] = `${item.manufacturer} ${item.name}`)\r\n    );\r\n\r\n    return (\r\n        <MaterialTable\r\n            isLoading={data.length > 0 ? false : true}\r\n            title=\"Заказы\"\r\n            localization={localization}\r\n            columns={[\r\n                {\r\n                    title: \"Статус\",\r\n                    field: \"finished\",\r\n                    // editable: \"onUpdate\",\r\n                    initialEditValue: \"false\",\r\n                    lookup: {\r\n                        true: \"Завершён\",\r\n                        false: \"В работе\",\r\n                    },\r\n                    render: (rowData) =>\r\n                        rowData.finished ? (\r\n                            <FinishedStatus />\r\n                        ) : (\r\n                            <InWorkStatus />\r\n                        ),\r\n                },\r\n                {\r\n                    title: \"Дата создания\",\r\n                    field: \"date\",\r\n                    type: \"datetime\",\r\n                    editable: \"never\",\r\n                },\r\n                {\r\n                    title: \"Дата завершения\",\r\n                    field: \"date_finished\",\r\n                    type: \"datetime\",\r\n                    editable: \"never\",\r\n                    emptyValue: \"—\",\r\n                },\r\n                {\r\n                    title: \"Номер\",\r\n                    field: \"number\",\r\n                    type: \"numeric\",\r\n                    emptyValue: \"Не определён\",\r\n                },\r\n                {\r\n                    title: \"Картридж\",\r\n                    field: \"cartridge\",\r\n                    lookup: cartridgesChoices,\r\n                },\r\n                {\r\n                    title: \"Количество\",\r\n                    field: \"count\",\r\n                    type: \"numeric\",\r\n                },\r\n            ]}\r\n            data={data}\r\n            components={{\r\n                Container: (props) => (\r\n                    <Paper\r\n                        {...props}\r\n                        elevation={useTheme().tables.elevation}\r\n                        className={classes.root}\r\n                    />\r\n                ),\r\n            }}\r\n            options={{\r\n                exportButton: true,\r\n                actionsColumnIndex: -1,\r\n            }}\r\n            actions={[\r\n                (rowData) => ({\r\n                    icon: \"check\",\r\n                    tooltip: rowData.finished ? undefined : \"Завершить заказ\",\r\n                    disabled: rowData.finished,\r\n                    onClick: (event, rowData) => {\r\n                        console.log(event, rowData);\r\n                        if (!rowData.finished) {\r\n                            alert(`Заказ ${rowData.number} выполнен`);\r\n                        } else {\r\n                            alert(\r\n                                `Заказ ${rowData.number} уже является выполненным`\r\n                            );\r\n                        }\r\n                    },\r\n                }),\r\n            ]}\r\n            editable={{\r\n                onRowAdd: (newData) =>\r\n                    new Promise((resolve) => {\r\n                        handleCreate(newData);\r\n                        // enqueueSnackbar(\"Заказ добавлен\");\r\n                        resolve();\r\n                    }),\r\n                onRowUpdate: (newData) =>\r\n                    new Promise((resolve) => {\r\n                        handleUpdate(newData);\r\n                        // enqueueSnackbar(\"Заказ обновлён\");\r\n                        resolve();\r\n                    }),\r\n                onRowDelete: (oldData) =>\r\n                    new Promise((resolve) => {\r\n                        handleDelete(oldData);\r\n                        // enqueueSnackbar(\"Заказ удалён\");\r\n                        resolve();\r\n                    }),\r\n            }}\r\n        />\r\n    );\r\n}\r\n\r\nexport default OrdersTable;\r\n","import React from \"react\";\r\nimport { makeStyles, useTheme } from \"@material-ui/core/styles\";\r\n\r\nimport { Paper } from \"@material-ui/core\";\r\n\r\nimport tinycolor from \"tinycolor2\";\r\n\r\nimport MaterialTable from \"material-table\";\r\nimport localization from \"./localization\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        borderTop: theme.tables.borderSize,\r\n        borderTopColor: theme.palette.primary.light,\r\n        borderTopStyle: \"solid\",\r\n    },\r\n}));\r\n\r\nconst prepareData = (supply) => {\r\n    supply.out = supply.out === \"true\" || supply.out === true ? true : false;\r\n    return supply;\r\n};\r\n\r\nfunction SuppliesEditable(props) {\r\n    const {\r\n        data,\r\n        cartridges,\r\n        handleSupplyDelete,\r\n        handleSupplyUpdate,\r\n        handleSupplyCreate,\r\n    } = props;\r\n\r\n    // const { enqueueSnackbar, closeSnackbar } = useSnackbar();\r\n\r\n    const classes = useStyles();\r\n    const theme = useTheme();\r\n\r\n    const rowStyles = {\r\n        outRow: {\r\n            backgroundColor: tinycolor(theme.palette.error.light).lighten(20),\r\n        },\r\n        inRow: {\r\n            backgroundColor: tinycolor(theme.palette.success.light).lighten(24),\r\n        },\r\n    };\r\n\r\n    let cartridgesChoices = {};\r\n    cartridges.forEach(\r\n        (item) =>\r\n            (cartridgesChoices[item.name] = `${item.manufacturer} ${item.name}`)\r\n    );\r\n\r\n    return (\r\n        <MaterialTable\r\n            isLoading={data.length > 0 ? false : true}\r\n            components={{\r\n                Container: (props) => (\r\n                    <Paper\r\n                        {...props}\r\n                        elevation={theme.tables.elevation}\r\n                        className={classes.root}\r\n                    />\r\n                ),\r\n            }}\r\n            localization={localization}\r\n            title=\"Перемещение Картриджей\"\r\n            columns={[\r\n                {\r\n                    title: \"Дата\",\r\n                    field: \"date\",\r\n                    type: \"datetime\",\r\n                    editable: \"never\",\r\n                },\r\n                {\r\n                    title: \"Событие\",\r\n                    field: \"out\",\r\n                    initialEditValue: \"true\",\r\n                    lookup: { true: \"Выдача\", false: \"Поступление\" },\r\n                },\r\n                {\r\n                    title: \"Картридж\",\r\n                    field: \"cartridge\",\r\n                    lookup: cartridgesChoices,\r\n                },\r\n                { title: \"Количество\", field: \"count\", type: \"numeric\" },\r\n                { title: \"Комментарий\", field: \"comment\" },\r\n            ]}\r\n            data={data}\r\n            options={{\r\n                exportButton: true,\r\n                actionsColumnIndex: -1,\r\n                // emptyRowsWhenPaging: true,\r\n                // paging: false,\r\n                rowStyle: (rowData) =>\r\n                    rowData.out ? rowStyles.outRow : rowStyles.inRow,\r\n            }}\r\n            editable={{\r\n                onRowAdd: (newData) =>\r\n                    new Promise((resolve) => {\r\n                        handleSupplyCreate(prepareData(newData));\r\n                        // enqueueSnackbar(\"Перемещение добавлено\");\r\n                        resolve();\r\n                    }),\r\n                onRowUpdate: (newData) =>\r\n                    new Promise((resolve) => {\r\n                        handleSupplyUpdate(prepareData(newData));\r\n                        // enqueueSnackbar(\"Перемещение обновлено\");\r\n                        resolve();\r\n                    }),\r\n                onRowDelete: (oldData) =>\r\n                    new Promise((resolve) => {\r\n                        handleSupplyDelete(oldData);\r\n                        // enqueueSnackbar(\"Перемещение удалено\");\r\n                        resolve();\r\n                    }),\r\n            }}\r\n        />\r\n    );\r\n}\r\n\r\nexport default SuppliesEditable;\r\n","import React from \"react\";\r\nimport {\r\n    AppBar,\r\n    Toolbar,\r\n    Typography,\r\n    IconButton,\r\n    Tooltip,\r\n} from \"@material-ui/core\";\r\nimport { Http, SupervisedUserCircle } from \"@material-ui/icons\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        flexGrow: 1,\r\n    },\r\n    title: {\r\n        flexGrow: 1,\r\n    },\r\n    // button: {\r\n    //     marginRight: theme.spacing(2),\r\n    // },\r\n}));\r\n\r\nfunction NavBar({ title }) {\r\n    const classes = useStyles();\r\n\r\n    const history = useHistory();\r\n\r\n    return (\r\n        <div>\r\n            <AppBar position=\"static\">\r\n                <Toolbar variant=\"regular\">\r\n                    <Typography\r\n                        className={classes.title}\r\n                        variant=\"h6\"\r\n                        color=\"inherit\">\r\n                        {title}\r\n                    </Typography>\r\n                    <Tooltip title=\"REST API\" arrow>\r\n                        <IconButton\r\n                            onClick={() => {\r\n                                history.push(\"/api\");\r\n                                window.location.reload();\r\n                            }}\r\n                            color=\"inherit\"\r\n                            aria-label=\"REST\">\r\n                            <Http fontSize=\"large\" />\r\n                        </IconButton>\r\n                    </Tooltip>\r\n                    <Tooltip title=\"Админка\" arrow>\r\n                        <IconButton\r\n                            onClick={() => {\r\n                                history.push(\"/admin\");\r\n                                window.location.reload();\r\n                            }}\r\n                            color=\"inherit\"\r\n                            aria-label=\"Admin\">\r\n                            <SupervisedUserCircle fontSize=\"large\" />\r\n                        </IconButton>\r\n                    </Tooltip>\r\n                    {/* <Button color=\"inherit\">\r\n                        <Tooltip title=\"REST API\">\r\n                            <Http />\r\n                        </Tooltip>\r\n                    </Button> */}\r\n                </Toolbar>\r\n            </AppBar>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default NavBar;\r\n","import React, { Component } from \"react\";\r\nimport { withSnackbar } from \"notistack\";\r\n\r\nimport { Widget, addResponseMessage } from \"react-chat-widget\";\r\nimport \"react-chat-widget/lib/styles.css\";\r\nimport { Button } from \"@material-ui/core\";\r\n\r\nexport class Chat extends Component {\r\n    state = {\r\n        user: null,\r\n        ws: null,\r\n        connectState: null,\r\n    };\r\n\r\n    async componentDidMount() {\r\n        this.connect();\r\n    }\r\n\r\n    handleNewUserMessage = (newMessage) => {\r\n        this.state.ws.send(\r\n            JSON.stringify({\r\n                user: this.state.user,\r\n                message: newMessage,\r\n            })\r\n        );\r\n    };\r\n\r\n    connect = () => {\r\n        var ws = new WebSocket(\r\n            \"ws://\" + window.location.host.split(\":\")[0] + \"/chat\"\r\n        );\r\n\r\n        ws.onmessage = (e) => {\r\n            var data = JSON.parse(e.data);\r\n            var message = data[\"message\"];\r\n            var user = data[\"user\"];\r\n            if (this.state.user !== user) {\r\n                addResponseMessage(message);\r\n            }\r\n        };\r\n\r\n        // websocket onopen event listener\r\n        ws.onopen = () => {\r\n            console.log(\"connected websocket main component\");\r\n\r\n            this.props.data.forEach((element) => {\r\n                console.log(element);\r\n            });\r\n\r\n            this.props.closeSnackbar();\r\n\r\n            this.setState({\r\n                ws: ws,\r\n                user: Math.random(),\r\n            });\r\n        };\r\n\r\n        // websocket onclose event listener\r\n        ws.onclose = (e) => {\r\n            this.props.enqueueSnackbar(\"Нет подключения к чату\", {\r\n                variant: \"error\",\r\n                persist: true,\r\n                preventDuplicate: true,\r\n                action: (key) => (\r\n                    <Button onClick={() => this.connect()}>\r\n                        Переподключится\r\n                    </Button>\r\n                ),\r\n                anchorOrigin: {\r\n                    vertical: \"bottom\",\r\n                    horizontal: \"right\",\r\n                },\r\n            });\r\n\r\n            this.setState({ ws: null, user: \"не подключен\" });\r\n        };\r\n\r\n        // websocket onerror event listener\r\n        ws.onerror = (err) => {\r\n            console.error(\r\n                \"Socket encountered error: \",\r\n                err.message,\r\n                \"Closing socket\"\r\n            );\r\n\r\n            ws.close();\r\n        };\r\n    };\r\n\r\n    render() {\r\n        if (this.state.ws !== null) {\r\n            return (\r\n                <Widget\r\n                    handleNewUserMessage={this.handleNewUserMessage}\r\n                    title=\"Чат\"\r\n                    subtitle={\"User id \" + this.state.user}\r\n                />\r\n            );\r\n        }\r\n        return null;\r\n    }\r\n}\r\n\r\nexport default withSnackbar(Chat);\r\n","import React from \"react\";\r\n\r\nfunction Test() {\r\n    return (\r\n        <div>\r\n            <h1>Test page</h1>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Test;\r\n","import axios from \"axios\";\r\n\r\nexport const api = axios.create({\r\n    baseURL: \"http://it-vlshv.dellin.local/api/\",\r\n    // baseURL: \"http://\" + window.location.host + \"/api/\",\r\n    // baseURL: \"http://127.0.0.1:8000/api/\",\r\n    responseType: \"json\",\r\n});\r\n","import { api } from \"./api\";\r\n\r\nexport class CommonApi {\r\n    constructor(path, messages, callbacks) {\r\n        this.messages = messages;\r\n        this.path = path;\r\n        this.callbacks = callbacks;\r\n    }\r\n\r\n    refresh() {\r\n        return api\r\n            .get(this.path)\r\n            .catch((reason) => this.callbacks.error(reason))\r\n            .then((response) => this.callbacks.setState(response.data));\r\n    }\r\n\r\n    create = async (instance) => {\r\n        api.post(this.path, instance)\r\n            .catch((reason) => {\r\n                this.callbacks.error(\r\n                    this.messages.create.error + \" \\n \" + reason\r\n                );\r\n                console.log(\"CommonApi.create.catch\", reason.body);\r\n            })\r\n            .then(\r\n                () => {\r\n                    this.callbacks.refreshAll();\r\n                    this.callbacks.success(this.messages.create.success);\r\n                },\r\n                (reason) =>\r\n                    console.log(\"CommonApi.create.then.onrejected:\", reason)\r\n            );\r\n    };\r\n\r\n    update = async (instance) => {\r\n        api.put(`${this.path}${instance.id}/`, instance)\r\n            .catch((reason) => {\r\n                this.callbacks.error(\r\n                    this.messages.update.error + \" \\n \" + reason\r\n                );\r\n            })\r\n            .then(() => {\r\n                this.callbacks.refreshAll();\r\n                this.callbacks.success(this.messages.update.success);\r\n            });\r\n    };\r\n\r\n    delete = async (instance) => {\r\n        api.delete(`${this.path}${instance.id}/`)\r\n            .catch((reason) => {\r\n                this.callbacks.error(\r\n                    this.messages.delete.error + \" \\n \" + reason\r\n                );\r\n            })\r\n            .then(() => {\r\n                this.callbacks.refreshAll();\r\n                this.callbacks.success(this.messages.delete.success);\r\n            });\r\n    };\r\n}\r\n","import { api } from \"./api\";\r\n\r\nexport default async function fetchAll() {\r\n    return api.get(\"all\");\r\n}\r\n\r\n// export const fetchCartridgesList = async () => {\r\n//     const cartridges = await api.get(\"cartridges/\");\r\n//     // console.log(\"fetchCartridgesList:\", cartridges);\r\n//     // return cartridges.data;\r\n//     return (await api.get(\"cartridges/\")).data;\r\n// };\r\n\r\n// export const fetchOrders = async () => {\r\n//     const orders = await api.get(\"orders/\");\r\n//     // console.log(\"fetchSupplies:\", orders);\r\n//     return orders.data;\r\n// };\r\n","import React, { Component } from \"react\";\r\n\r\nimport { Grid, CircularProgress } from \"@material-ui/core\";\r\n\r\nimport { withSnackbar } from \"notistack\";\r\n\r\nimport {\r\n    CartridesTable,\r\n    SuppliesEditable,\r\n    OrdersTable,\r\n    Chat,\r\n} from \"../components\";\r\nimport { CommonApi } from \"../api/CommonApi\";\r\nimport fetchAll from \"../api\";\r\n\r\nclass Home extends Component {\r\n    state = {\r\n        cartridgesData: [],\r\n        suppliesData: [],\r\n        ordersData: [],\r\n        chatMessageHistory: [],\r\n    };\r\n\r\n    displayActions = {\r\n        success: async (msg) => {\r\n            this.props.enqueueSnackbar(msg, { variant: \"success\" });\r\n        },\r\n        error: async (msg) => {\r\n            this.props.enqueueSnackbar(`${msg}`, { variant: \"error\" });\r\n            console.log(\"dispError:\", msg);\r\n        },\r\n        msg: async (msg) => {\r\n            this.props.enqueueSnackbar(msg);\r\n        },\r\n    };\r\n\r\n    handleRefresh = async () => {\r\n        fetchAll()\r\n            .catch((reason) => {\r\n                console.log(reason);\r\n                this.displayActions.error(reason);\r\n            })\r\n            .then((response) => {\r\n                if (response) {\r\n                    const {\r\n                        cartridges,\r\n                        supplies,\r\n                        orders,\r\n                        chatMessage,\r\n                    } = response.data;\r\n                    this.setState({\r\n                        cartridgesData: cartridges,\r\n                        suppliesData: supplies,\r\n                        ordersData: orders,\r\n                        chatMessageHistory: chatMessage,\r\n                    });\r\n                }\r\n            });\r\n    };\r\n\r\n    supplyApi = new CommonApi(\r\n        \"supplies/\",\r\n        {\r\n            create: {\r\n                success: \"Перемещение создано успешно!\",\r\n                error: \"Не удалось создать перемещение!\",\r\n            },\r\n            update: {\r\n                success: \"Перемещение обновлено успешно!\",\r\n                error: \"Не удалось обновить перемещение!\",\r\n            },\r\n            delete: {\r\n                success: \"Перемещение удалено успешно!\",\r\n                error: \"Не удалось удалить перемещение!\",\r\n            },\r\n        },\r\n        {\r\n            refreshAll: this.handleRefresh,\r\n            setState: (value) => this.setState({ suppliesData: value }),\r\n            success: this.displayActions.success,\r\n            error: this.displayActions.error,\r\n            msg: this.displayActions.msg,\r\n        }\r\n    );\r\n\r\n    orderApi = new CommonApi(\r\n        \"orders/\",\r\n        {\r\n            create: {\r\n                success: \"Заказ создан успешно!\",\r\n                error: \"Не удалось создать заказ!\",\r\n            },\r\n            update: {\r\n                success: \"Заказ обновлён успешно!\",\r\n                error: \"Не удалось обновить заказ!\",\r\n            },\r\n            delete: {\r\n                success: \"Заказ удалён успешно!\",\r\n                error: \"Не удалось удалить заказ!\",\r\n            },\r\n        },\r\n        {\r\n            refreshAll: this.handleRefresh,\r\n            setState: (value) => this.setState({ ordersData: value }),\r\n            success: this.displayActions.success,\r\n            error: this.displayActions.error,\r\n            msg: this.displayActions.msg,\r\n        }\r\n    );\r\n\r\n    async componentDidMount() {\r\n        await this.handleRefresh();\r\n    }\r\n\r\n    render() {\r\n        const {\r\n            cartridgesData,\r\n            suppliesData,\r\n            ordersData,\r\n            chatMessageHistory,\r\n        } = this.state;\r\n\r\n        return (\r\n            <Grid container spacing={3}>\r\n                <Grid key=\"progress\" xs={12} item>\r\n                    {/* <LinearProgress variant=\"indeterminate\" color=\"secondary\" /> */}\r\n                    <CircularProgress />\r\n                    <CircularProgress disableShrink />\r\n                </Grid>\r\n                <Grid key=\"cartridges\" xs={12} lg={4} item>\r\n                    <CartridesTable cartridges={cartridgesData} />\r\n                </Grid>\r\n                <Grid key=\"supplies\" xs={12} lg={8} item>\r\n                    <SuppliesEditable\r\n                        data={suppliesData}\r\n                        cartridges={cartridgesData}\r\n                        handleSupplyDelete={this.supplyApi.delete}\r\n                        handleSupplyCreate={this.supplyApi.create}\r\n                        handleSupplyUpdate={this.supplyApi.update}\r\n                    />\r\n                </Grid>\r\n                <Grid key=\"orders\" xs={12} lg={12} item>\r\n                    <OrdersTable\r\n                        data={ordersData}\r\n                        cartridges={cartridgesData}\r\n                        handleCreate={this.orderApi.create}\r\n                        handleUpdate={this.orderApi.update}\r\n                        handleDelete={this.orderApi.delete}\r\n                    />\r\n                </Grid>\r\n                <Grid>\r\n                    <Chat data={chatMessageHistory} />\r\n                </Grid>\r\n            </Grid>\r\n        );\r\n    }\r\n}\r\n\r\nexport default withSnackbar(Home);\r\n","import { BrowserRouter, Switch, Route } from \"react-router-dom\";\r\n\r\nimport { Container, IconButton } from \"@material-ui/core\";\r\nimport {\r\n    MuiThemeProvider,\r\n    createMuiTheme,\r\n    responsiveFontSizes,\r\n} from \"@material-ui/core/styles\";\r\nimport { Close } from \"@material-ui/icons\";\r\n\r\nimport { green, blue } from \"@material-ui/core/colors\";\r\n\r\nimport { SnackbarProvider } from \"notistack\";\r\n\r\nimport React, { Component } from \"react\";\r\n\r\nimport { NavBar } from \"./components\";\r\n\r\nimport Test from \"./pages/Test\";\r\nimport Home from \"./pages/Home\";\r\n\r\n// import styles from \"./App.css\";\r\n\r\nexport class App extends Component {\r\n    state = {\r\n        navbarTitle: \"РЦ Валищево • Картриджи\",\r\n        theme: responsiveFontSizes(\r\n            createMuiTheme({\r\n                palette: {\r\n                    // type: \"dark\",\r\n                    primary: blue,\r\n                    secondary: green,\r\n                },\r\n                tables: {\r\n                    borderSize: \"0.5rem\",\r\n                    elevation: 5,\r\n                },\r\n                // status: {\r\n                //   danger: \"orange\",\r\n                // },\r\n            })\r\n        ),\r\n    };\r\n\r\n    notistackRef = React.createRef();\r\n    onClickDismiss = (key) => () => {\r\n        this.notistackRef.current.closeSnackbar(key);\r\n    };\r\n\r\n    render() {\r\n        const { navbarTitle, theme } = this.state;\r\n\r\n        return (\r\n            <BrowserRouter>\r\n                <MuiThemeProvider theme={theme}>\r\n                    <SnackbarProvider\r\n                        // maxSnack={3}\r\n                        ref={this.notistackRef}\r\n                        action={(key) => (\r\n                            <IconButton\r\n                                onClick={this.onClickDismiss(key)}\r\n                                color=\"inherit\">\r\n                                <Close />\r\n                            </IconButton>\r\n                        )}>\r\n                        <NavBar title={navbarTitle} />\r\n                        <Container\r\n                            style={{ paddingTop: 5 + \"%\" }}\r\n                            maxWidth=\"lg\">\r\n                            <Switch>\r\n                                <Route path=\"/\" exact component={Home} />\r\n                                <Route path=\"/test\" exact component={Test} />\r\n                            </Switch>\r\n                        </Container>\r\n                    </SnackbarProvider>\r\n                </MuiThemeProvider>\r\n            </BrowserRouter>\r\n        );\r\n    }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nReactDOM.render(\r\n  // <React.StrictMode>\r\n  <App />,\r\n  // </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}