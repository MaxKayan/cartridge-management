{"version":3,"sources":["api/api.js","api/index.js","components/CartridgesTable/CartridgesTable.jsx","components/SuppliesTable/SuppliesTable.jsx","components/SuppliesEditable/localization.js","components/SuppliesEditable/SuppliesEditable.jsx","components/NavBar/NavBar.jsx","components/OrdersTable/FinishedStatus.jsx","components/OrdersTable/InWorkStatus.jsx","components/OrdersTable/OrdersTable.jsx","api/supplyDao.js","api/orderDao.js","App.js","serviceWorker.js","index.js"***REMOVED***,"names":["api","axios","create","baseURL","responseType","fetchCartridgesList","a","get","cartridges","console","log","data","useStyles","makeStyles","theme","root","borderTop","tables","borderSize","borderTopColor","palette","primary","light","borderTopStyle","header","backgroundColor","dark","color","common","white","CartridgesTable","props","classes","TableContainer","className","component","Paper","elevation","useTheme","Table","aria-label","TableHead","TableRow","TableCell","align","TableBody","map","row","key","name","scope","manufacturer","count","withStyles","head","outRow","error","inRow","success","localization","pagination","labelDisplayedRows","labelRowsSelect","toolbar","nRowsSelected","searchTooltip","searchPlaceholder","exportTitle","exportAriaLabel","exportName","actions","body","emptyDataSourceMessage","addTooltip","deleteTooltip","editTooltip","filterRow","filterTooltip","editRow","deleteText","cancelTooltip","saveTooltip","prepareData","supply","out","SuppliesEditable","handleSupplyDelete","handleSupplyUpdate","handleSupplyCreate","rowStyles","tinycolor","lighten","cartridgesChoices","forEach","item","columns","title","field","type","editable","initialEditValue","lookup","true","false","components","Container","options","exportButton","actionsColumnIndex","rowStyle","rowData","onRowAdd","newData","Promise","resolve","onRowUpdate","onRowDelete","oldData","id","NavBar","this","AppBar","position","Toolbar","variant","Typography","Button","Tooltip","Http","Component","FinishedStatus","CheckCircle","InWorkStatus","LocalShipping","OrdersTable","render","finished","emptyValue","icon","tooltip","disabled","onClick","event","alert","number","supplyDao","getAll","supplies","post","catch","reason","response","update","put","delete","ordersDao","order","App","state","navbarTitle","responsiveFontSizes","createMuiTheme","blue","secondary","green","cartridgesData","suppliesData","ordersData","handleRefresh","orders","setState","style","paddingTop","maxWidth","Grid","container","spacing","xs","lg","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","message"***REMOVED***,"mappings":"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","file":"static/js/main.9df06aa3.chunk.js","sourcesContent":["import axios from \"axios\";\r\n\r\nexport const api = axios.create({\r\n    baseURL: \"http://ps-bykrc.dellin.local/api/\",\r\n    // baseURL: \"http://127.0.0.1:8000/api/\",\r\n    responseType: \"json\",\r\n***REMOVED***);\r\n","import { api ***REMOVED*** from \"./api\";\r\n\r\n// export { default as supplyDao ***REMOVED*** from \"./supplyDao\";\r\n\r\nexport const fetchCartridgesList = async () => {\r\n    const cartridges = await api.get(\"cartridges/\");\r\n    console.log(\"fetchCartridgesList:\", cartridges);\r\n    // return cartridges.data;\r\n    return (await api.get(\"cartridges/\")).data;\r\n***REMOVED***;\r\n\r\nexport const fetchOrders = async () => {\r\n    const orders = await api.get(\"orders/\");\r\n    console.log(\"fetchSupplies:\", orders);\r\n    return orders.data;\r\n***REMOVED***;\r\n","import React from \"react\";\r\n\r\nimport {\r\n    TableContainer,\r\n    Table,\r\n    TableHead,\r\n    TableRow,\r\n    TableCell,\r\n    TableBody,\r\n    Paper,\r\n***REMOVED*** from \"@material-ui/core\";\r\n\r\nimport { makeStyles, useTheme ***REMOVED*** from \"@material-ui/core/styles\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        borderTop: theme.tables.borderSize,\r\n        borderTopColor: theme.palette.primary.light,\r\n        borderTopStyle: \"solid\",\r\n    ***REMOVED***,\r\n    header: {\r\n        backgroundColor: theme.palette.primary.dark,\r\n        color: theme.palette.common.white,\r\n    ***REMOVED***,\r\n***REMOVED***));\r\n\r\nfunction CartridgesTable(props) {\r\n    const classes = useStyles();\r\n    const { cartridges ***REMOVED*** = props;\r\n\r\n    return (\r\n        <TableContainer\r\n            className={classes.root***REMOVED***\r\n            component={Paper***REMOVED***\r\n            elevation={useTheme().tables.elevation***REMOVED***>\r\n            <Table aria-label=\"cartridges table\">\r\n                <TableHead>\r\n                    <TableRow>\r\n                        <TableCell>Производитель</TableCell>\r\n                        <TableCell align=\"right\">Наименование</TableCell>\r\n                        <TableCell align=\"right\">Количество</TableCell>\r\n                    </TableRow>\r\n                </TableHead>\r\n                <TableBody>\r\n                ***REMOVED***cartridges.map((row) => (\r\n                        <TableRow key={row.name***REMOVED***>\r\n                            <TableCell component=\"th\" scope=\"row\">\r\n                            ***REMOVED***row.manufacturer***REMOVED***\r\n                            </TableCell>\r\n                            <TableCell align=\"right\">{row.name***REMOVED***</TableCell>\r\n                            <TableCell align=\"right\">{row.count***REMOVED***</TableCell>\r\n                        </TableRow>\r\n                    ))***REMOVED***\r\n                </TableBody>\r\n            </Table>\r\n        </TableContainer>\r\n    );\r\n***REMOVED***\r\n\r\nexport default CartridgesTable;\r\n","import React from \"react\";\r\n\r\nimport {\r\n  TableContainer,\r\n  Table,\r\n  TableHead,\r\n  TableBody,\r\n  TableRow,\r\n  TableCell,\r\n  Paper,\r\n***REMOVED*** from \"@material-ui/core\";\r\n\r\nimport { withStyles, makeStyles ***REMOVED*** from \"@material-ui/core/styles\";\r\n\r\nconst StyledTableCell = withStyles((theme) => ({\r\n  head: {\r\n    backgroundColor: theme.palette.primary.dark,\r\n    color: theme.palette.common.white,\r\n  ***REMOVED***,\r\n***REMOVED***))(TableCell);\r\n\r\n// const StyledTableRow = withStyles((theme) => ({\r\n//   root: {\r\n//     \"&:nth-of-type(odd)\": {\r\n//       backgroundColor: theme.palette.action.hover,\r\n//     ***REMOVED***,\r\n//   ***REMOVED***,\r\n// ***REMOVED***))(TableRow);\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  outRow: {\r\n    backgroundColor: theme.palette.error.light,\r\n    color: theme.palette.common.white,\r\n  ***REMOVED***,\r\n  inRow: {\r\n    backgroundColor: theme.palette.success.light,\r\n  ***REMOVED***,\r\n***REMOVED***));\r\n\r\nexport default function SuppliesTable(props) {\r\n  const classes = useStyles();\r\n  const { supplies ***REMOVED*** = props;\r\n  const eleveation = props.elevation ? props.elevation : 5;\r\n\r\n  return (\r\n    <TableContainer component={Paper***REMOVED*** elevation={eleveation***REMOVED***>\r\n      <Table aria-label=\"cartridges table\">\r\n        <TableHead>\r\n          <TableRow>\r\n            <StyledTableCell>Время</StyledTableCell>\r\n            <StyledTableCell align=\"right\">Наименование</StyledTableCell>\r\n            <StyledTableCell align=\"right\">Количество</StyledTableCell>\r\n            <StyledTableCell align=\"right\">Комментарий</StyledTableCell>\r\n          </TableRow>\r\n        </TableHead>\r\n        <TableBody>\r\n      ***REMOVED***supplies.map((row) => (\r\n            <TableRow\r\n              key={row.id***REMOVED***\r\n              className={row.out ? classes.outRow : classes.inRow***REMOVED***\r\n            >\r\n              <TableCell component=\"th\" scope=\"row\">\r\n            ***REMOVED***row.date***REMOVED***\r\n              </TableCell>\r\n              <TableCell align=\"right\">{row.cartridge_str***REMOVED***</TableCell>\r\n              <TableCell align=\"right\">\r\n            ***REMOVED***row.out ? row.count * -1 : row.count***REMOVED***\r\n              </TableCell>\r\n              <TableCell align=\"right\">{row.comment***REMOVED***</TableCell>\r\n            </TableRow>\r\n          ))***REMOVED***\r\n        </TableBody>\r\n      </Table>\r\n    </TableContainer>\r\n  );\r\n***REMOVED***\r\n","const localization = {\r\n    pagination: {\r\n        labelDisplayedRows: \"{from***REMOVED***-{to***REMOVED*** из {count***REMOVED***\",\r\n        labelRowsSelect: \"строк\",\r\n    ***REMOVED***,\r\n    toolbar: {\r\n        nRowsSelected: \"{0***REMOVED*** перемещение(ий) выбрано\",\r\n        searchTooltip: \"Поиск\",\r\n        searchPlaceholder: \"Поиск\",\r\n        exportTitle: \"Экспорт\",\r\n        exportAriaLabel: \"Экспорт\",\r\n        exportName: \"Экспортировать в CSV\",\r\n    ***REMOVED***,\r\n    header: {\r\n        actions: \"Действия\",\r\n    ***REMOVED***,\r\n    body: {\r\n        emptyDataSourceMessage: \"Перемещения отсутствуют\",\r\n        addTooltip: \"Добавить\",\r\n        deleteTooltip: \"Удалить\",\r\n        editTooltip: \"Редактировать\",\r\n        filterRow: {\r\n            filterTooltip: \"Фильтр\",\r\n        ***REMOVED***,\r\n        editRow: {\r\n            deleteText: \"Удалить перемещение?\",\r\n            cancelTooltip: \"Отмена\",\r\n            saveTooltip: \"Подтвердить\",\r\n        ***REMOVED***,\r\n    ***REMOVED***,\r\n***REMOVED***;\r\n\r\nexport default localization;\r\n","import React from \"react\";\r\nimport { makeStyles, useTheme ***REMOVED*** from \"@material-ui/core/styles\";\r\n\r\nimport { Paper ***REMOVED*** from \"@material-ui/core\";\r\n\r\nimport tinycolor from \"tinycolor2\";\r\n\r\nimport MaterialTable from \"material-table\";\r\nimport localization from \"./localization\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        borderTop: theme.tables.borderSize,\r\n        borderTopColor: theme.palette.primary.light,\r\n        borderTopStyle: \"solid\",\r\n    ***REMOVED***,\r\n***REMOVED***));\r\n\r\nconst prepareData = (supply) => {\r\n    supply.out = supply.out === \"true\" || supply.out === true ? true : false;\r\n    return supply;\r\n***REMOVED***;\r\n\r\nfunction SuppliesEditable(props) {\r\n    const {\r\n        cartridges,\r\n        handleSupplyDelete,\r\n        handleSupplyUpdate,\r\n        handleSupplyCreate,\r\n    ***REMOVED*** = props;\r\n\r\n    const classes = useStyles();\r\n    const theme = useTheme();\r\n\r\n    const rowStyles = {\r\n        outRow: {\r\n            backgroundColor: tinycolor(theme.palette.error.light).lighten(20),\r\n        ***REMOVED***,\r\n        inRow: {\r\n            backgroundColor: tinycolor(theme.palette.success.light).lighten(24),\r\n        ***REMOVED***,\r\n    ***REMOVED***;\r\n\r\n    let cartridgesChoices = {***REMOVED***;\r\n    cartridges.forEach(\r\n        (item) =>\r\n            (cartridgesChoices[item.name***REMOVED*** = `${item.manufacturer***REMOVED*** ${item.name***REMOVED***`)\r\n    );\r\n\r\n    const columns = [\r\n    ***REMOVED*** title: \"Дата\", field: \"date\", type: \"datetime\", editable: \"never\" ***REMOVED***,\r\n    ***REMOVED***\r\n            title: \"Событие\",\r\n            field: \"out\",\r\n            initialEditValue: \"true\",\r\n            lookup: { true: \"Выдача\", false: \"Поступление\" ***REMOVED***,\r\n        ***REMOVED***,\r\n    ***REMOVED***\r\n            title: \"Картридж\",\r\n            field: \"cartridge\",\r\n            lookup: cartridgesChoices,\r\n        ***REMOVED***,\r\n    ***REMOVED*** title: \"Количество\", field: \"count\", type: \"numeric\" ***REMOVED***,\r\n    ***REMOVED*** title: \"Комментарий\", field: \"comment\" ***REMOVED***,\r\n    ***REMOVED***;\r\n\r\n    return (\r\n        <MaterialTable\r\n            components={{\r\n                Container: (props) => (\r\n                    <Paper\r\n                    ***REMOVED***...props***REMOVED***\r\n                        elevation={theme.tables.elevation***REMOVED***\r\n                        className={classes.root***REMOVED***\r\n                    />\r\n                ),\r\n            ***REMOVED******REMOVED***\r\n            localization={localization***REMOVED***\r\n            title=\"Перемещение Картриджей\"\r\n            columns={columns***REMOVED***\r\n            data={props.data***REMOVED***\r\n            options={{\r\n                exportButton: true,\r\n                actionsColumnIndex: -1,\r\n                // emptyRowsWhenPaging: true,\r\n                // paging: false,\r\n                rowStyle: (rowData) =>\r\n                    rowData.out ? rowStyles.outRow : rowStyles.inRow,\r\n            ***REMOVED******REMOVED***\r\n            editable={{\r\n                onRowAdd: (newData) =>\r\n                    new Promise((resolve) => {\r\n                        handleSupplyCreate(prepareData(newData));\r\n                        resolve();\r\n                    ***REMOVED***),\r\n                onRowUpdate: (newData) =>\r\n                    new Promise((resolve) => {\r\n                        handleSupplyUpdate(prepareData(newData));\r\n                        resolve();\r\n                    ***REMOVED***),\r\n                onRowDelete: (oldData) =>\r\n                    new Promise((resolve) => {\r\n                        handleSupplyDelete(oldData.id);\r\n                        resolve();\r\n                    ***REMOVED***),\r\n            ***REMOVED******REMOVED***\r\n        />\r\n    );\r\n***REMOVED***\r\n\r\nexport default SuppliesEditable;\r\n","import React, { Component ***REMOVED*** from \"react\";\r\nimport {\r\n    AppBar,\r\n    Toolbar,\r\n    Typography,\r\n    IconButton,\r\n    Button,\r\n    Tooltip,\r\n***REMOVED*** from \"@material-ui/core\";\r\nimport { Http ***REMOVED*** from \"@material-ui/icons\";\r\nimport { makeStyles, withStyles ***REMOVED*** from \"@material-ui/core/styles\";\r\n\r\n// const styles = makeStyles((theme) => ({\r\n//     root: {\r\n//         flexGrow: 1,\r\n//     ***REMOVED***,\r\n// ***REMOVED***));\r\n\r\nexport class NavBar extends Component {\r\n    render() {\r\n        const { title, classes ***REMOVED*** = this.props;\r\n\r\n        return (\r\n            <div>\r\n                <AppBar position=\"static\">\r\n                    <Toolbar variant=\"regular\">\r\n                        <Typography variant=\"h6\" color=\"inherit\">\r\n                        ***REMOVED***title***REMOVED***\r\n                        </Typography>\r\n                    ***REMOVED***/* <IconButton edge=\"end\" color=\"inherit\" aria-label=\"REST\">\r\n                        <Http />\r\n                    </IconButton> */***REMOVED***\r\n                        <Button color=\"inherit\">\r\n                            <Tooltip title=\"REST API\">\r\n                                <Http />\r\n                            </Tooltip>\r\n                        </Button>\r\n                    </Toolbar>\r\n                </AppBar>\r\n            </div>\r\n        );\r\n    ***REMOVED***\r\n***REMOVED***\r\n\r\nexport default NavBar;\r\n","import React from \"react\";\r\n\r\nimport { CheckCircle ***REMOVED*** from \"@material-ui/icons\";\r\nimport { Tooltip ***REMOVED*** from \"@material-ui/core\";\r\n\r\nfunction FinishedStatus() {\r\n    return (\r\n        <Tooltip title=\"Завершён\" aria-label=\"Завершён\">\r\n            <CheckCircle color=\"secondary\" />\r\n        </Tooltip>\r\n    );\r\n***REMOVED***\r\n\r\nexport default FinishedStatus;\r\n","import React from \"react\";\r\n\r\nimport { LocalShipping ***REMOVED*** from \"@material-ui/icons\";\r\nimport { Tooltip ***REMOVED*** from \"@material-ui/core\";\r\n\r\nfunction InWorkStatus() {\r\n    return (\r\n        <Tooltip title=\"В работе\" aria-label=\"В работе\">\r\n            <LocalShipping />\r\n        </Tooltip>\r\n    );\r\n***REMOVED***\r\n\r\nexport default InWorkStatus;\r\n","import React from \"react\";\r\nimport { makeStyles, useTheme ***REMOVED*** from \"@material-ui/core/styles\";\r\n\r\nimport { Paper ***REMOVED*** from \"@material-ui/core\";\r\nimport { DoneAll, CheckCircle, LocalShipping ***REMOVED*** from \"@material-ui/icons\";\r\n\r\nimport MaterialTable from \"material-table\";\r\nimport localization from \"../SuppliesEditable/localization\";\r\nimport FinishedStatus from \"./FinishedStatus\";\r\nimport InWorkStatus from \"./InWorkStatus\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        borderTop: theme.tables.borderSize,\r\n        borderTopColor: theme.palette.primary.light,\r\n        borderTopStyle: \"solid\",\r\n    ***REMOVED***,\r\n***REMOVED***));\r\n\r\nfunction OrdersTable({ data, cartridges ***REMOVED***) {\r\n    const classes = useStyles();\r\n\r\n    let cartridgesChoices = {***REMOVED***;\r\n    cartridges.forEach(\r\n        (item) =>\r\n            (cartridgesChoices[item.name***REMOVED*** = `${item.manufacturer***REMOVED*** ${item.name***REMOVED***`)\r\n    );\r\n\r\n    return (\r\n        <MaterialTable\r\n            title=\"Заказы\"\r\n            localization={localization***REMOVED***\r\n            columns={[\r\n            ***REMOVED***\r\n                    title: \"Статус\",\r\n                    field: \"finished\",\r\n                    // editable: \"onUpdate\",\r\n                    initialEditValue: \"false\",\r\n                    lookup: {\r\n                        true: \"Завершён\",\r\n                        false: \"В работе\",\r\n                    ***REMOVED***,\r\n                    render: (rowData) =>\r\n                        rowData.finished ? (\r\n                            <FinishedStatus />\r\n                        ) : (\r\n                            <InWorkStatus />\r\n                        ),\r\n                ***REMOVED***,\r\n            ***REMOVED***\r\n                    title: \"Дата создания\",\r\n                    field: \"date\",\r\n                    type: \"datetime\",\r\n                    editable: \"never\",\r\n                ***REMOVED***,\r\n            ***REMOVED***\r\n                    title: \"Дата завершения\",\r\n                    field: \"date_finished\",\r\n                    type: \"datetime\",\r\n                    editable: \"never\",\r\n                    emptyValue: \"—\",\r\n                ***REMOVED***,\r\n            ***REMOVED***\r\n                    title: \"Номер\",\r\n                    field: \"number\",\r\n                    type: \"numeric\",\r\n                    emptyValue: \"Не определён\",\r\n                ***REMOVED***,\r\n            ***REMOVED***\r\n                    title: \"Картридж\",\r\n                    field: \"cartridge\",\r\n                    lookup: cartridgesChoices,\r\n                ***REMOVED***,\r\n            ***REMOVED***\r\n                    title: \"Количество\",\r\n                    field: \"count\",\r\n                    type: \"numeric\",\r\n                ***REMOVED***,\r\n            ***REMOVED******REMOVED***\r\n            data={data***REMOVED***\r\n            components={{\r\n                Container: (props) => (\r\n                    <Paper\r\n                    ***REMOVED***...props***REMOVED***\r\n                        elevation={useTheme().tables.elevation***REMOVED***\r\n                        className={classes.root***REMOVED***\r\n                    />\r\n                ),\r\n            ***REMOVED******REMOVED***\r\n            options={{\r\n                exportButton: true,\r\n                actionsColumnIndex: -1,\r\n            ***REMOVED******REMOVED***\r\n            actions={[\r\n                (rowData) => ({\r\n                    icon: \"check\",\r\n                    tooltip: rowData.finished\r\n                        ? \"Заказ уже завершён\"\r\n                        : \"Завершить заказ\",\r\n                    disabled: rowData.finished,\r\n                    onClick: (event, rowData) => {\r\n                        console.log(event, rowData);\r\n                        if (!rowData.finished) {\r\n                            alert(`Заказ ${rowData.number***REMOVED*** выполнен`);\r\n                        ***REMOVED*** else {\r\n                            alert(\r\n                                `Заказ ${rowData.number***REMOVED*** уже является выполненным`\r\n                            );\r\n                        ***REMOVED***\r\n                    ***REMOVED***,\r\n                ***REMOVED***),\r\n            ***REMOVED******REMOVED***\r\n            editable={{\r\n                onRowAdd: (newData) =>\r\n                    new Promise((resolve) => {\r\n                        console.log(newData);\r\n                        resolve();\r\n                    ***REMOVED***),\r\n                onRowUpdate: (newData) =>\r\n                    new Promise((resolve) => {\r\n                        console.log(newData);\r\n                        resolve();\r\n                    ***REMOVED***),\r\n                onRowDelete: (oldData) =>\r\n                    new Promise((resolve) => {\r\n                        console.log(oldData);\r\n                        resolve();\r\n                    ***REMOVED***),\r\n            ***REMOVED******REMOVED***\r\n        />\r\n    );\r\n***REMOVED***\r\n\r\nexport default OrdersTable;\r\n","// import { createSupply, fetchSupplies, updateSupply, deleteSupply ***REMOVED*** from \"./\";\r\nimport { api ***REMOVED*** from \"./api\";\r\n\r\nexport const supplyDao = {\r\n    getAll: async () => {\r\n        const supplies = await api.get(\"supplies/\");\r\n        console.log(\"fetchSupplies:\", supplies);\r\n        return supplies.data;\r\n    ***REMOVED***,\r\n    create: async (supply) => {\r\n        api.post(`supplies/`, supply).catch((reason) => {\r\n            console.log(\"response: \", reason.response.data);\r\n        ***REMOVED***);\r\n        console.log(\"createSupply:\", supply);\r\n    ***REMOVED***,\r\n    update: async (supply) => {\r\n        api.put(`supplies/${supply.id***REMOVED***/`, supply);\r\n    ***REMOVED***,\r\n    delete: async (id) => {\r\n        api.delete(`supplies/${id***REMOVED***/`);\r\n    ***REMOVED***,\r\n***REMOVED***;\r\n","import { api ***REMOVED*** from \"./api\";\r\n\r\nexport const ordersDao = {\r\n    getAll: async () => {\r\n        const response = await api.get(\"orders/\");\r\n        console.log(\"supplyDao.getAll:\", response);\r\n        return response.data;\r\n    ***REMOVED***,\r\n    create: async (order) => {\r\n        api.post(`orders/`, order).catch((reason) => {\r\n            console.log(\"ordersDao: \", reason.response.data);\r\n        ***REMOVED***);\r\n        console.log(\"ordersDao.create:\", order);\r\n    ***REMOVED***,\r\n    update: async (order) => {\r\n        api.put(`orders/${order.id***REMOVED***/`, order);\r\n    ***REMOVED***,\r\n    delete: async (id) => {\r\n        api.delete(`orders/${id***REMOVED***/`);\r\n    ***REMOVED***,\r\n***REMOVED***;\r\n","import { Container, Grid ***REMOVED*** from \"@material-ui/core\";\r\nimport {\r\n    MuiThemeProvider,\r\n    createMuiTheme,\r\n    responsiveFontSizes,\r\n***REMOVED*** from \"@material-ui/core/styles\";\r\n\r\nimport { green, blue ***REMOVED*** from \"@material-ui/core/colors\";\r\n\r\nimport \"./App.css\";\r\n\r\nimport {\r\n    fetchCartridgesList,\r\n    fetchSupplies,\r\n    fetchOrders,\r\n    deleteSupply,\r\n    createSupply,\r\n    updateSupply,\r\n***REMOVED*** from \"./api\";\r\n\r\nimport React, { Component ***REMOVED*** from \"react\";\r\n\r\nimport {\r\n    NavBar,\r\n    CartridesTable,\r\n    // SuppliesTable,\r\n    SuppliesEditable,\r\n***REMOVED*** from \"./components\";\r\nimport OrdersTable from \"./components/OrdersTable/OrdersTable\";\r\nimport { supplyDao ***REMOVED*** from \"./api/supplyDao\";\r\nimport { ordersDao ***REMOVED*** from \"./api/orderDao\";\r\n\r\n// import styles from \"./App.css\";\r\n\r\nexport class App extends Component {\r\n    state = {\r\n        navbarTitle: \"РЦ Валищево • Картриджи\",\r\n        theme: responsiveFontSizes(\r\n            createMuiTheme({\r\n                palette: {\r\n                    // type: \"dark\",\r\n                    primary: blue,\r\n                    secondary: green,\r\n                ***REMOVED***,\r\n                tables: {\r\n                    borderSize: \"0.5rem\",\r\n                    elevation: 5,\r\n                ***REMOVED***,\r\n                // status: {\r\n                //   danger: \"orange\",\r\n                // ***REMOVED***,\r\n            ***REMOVED***)\r\n        ),\r\n        cartridgesData: [***REMOVED***,\r\n        suppliesData: [***REMOVED***,\r\n        ordersData: [***REMOVED***,\r\n    ***REMOVED***;\r\n\r\n    handleRefresh = async () => {\r\n        const cartridges = await fetchCartridgesList();\r\n        const supplies = await supplyDao.getAll();\r\n        // const supplies = await fetchSupplies();\r\n        const orders = await ordersDao.getAll();\r\n        this.setState({\r\n            cartridgesData: cartridges,\r\n            suppliesData: supplies,\r\n            ordersData: orders,\r\n        ***REMOVED***);\r\n    ***REMOVED***;\r\n\r\n    handleSupplyDelete = async (id) => {\r\n        await supplyDao.delete(id);\r\n        await this.handleRefresh();\r\n        // this.props.enqueueSnackbar(`Перемещение №${id***REMOVED*** удалено успешно!`);\r\n    ***REMOVED***;\r\n\r\n    handleSupplyCreate = async (supply) => {\r\n        await supplyDao.create(supply);\r\n        // await createSupply(supply);\r\n        await this.handleRefresh();\r\n        // this.props.enqueueSnackbar(`Перемещение №${id***REMOVED*** удалено успешно!`);\r\n    ***REMOVED***;\r\n\r\n    handleSupplyUpdate = async (supply) => {\r\n        await supplyDao.update(supply);\r\n        await this.handleRefresh();\r\n        // this.props.enqueueSnackbar(`Перемещение №${id***REMOVED*** удалено успешно!`);\r\n    ***REMOVED***;\r\n\r\n    async componentDidMount() {\r\n        await this.handleRefresh();\r\n    ***REMOVED***\r\n\r\n    render() {\r\n        const {\r\n            navbarTitle,\r\n            theme,\r\n            cartridgesData,\r\n            suppliesData,\r\n            ordersData,\r\n        ***REMOVED*** = this.state;\r\n\r\n        return (\r\n            <MuiThemeProvider theme={theme***REMOVED***>\r\n                <NavBar title={navbarTitle***REMOVED*** />\r\n                <Container style={{ paddingTop: 5 + \"%\" ***REMOVED******REMOVED*** maxWidth=\"lg\">\r\n                    <Grid container spacing={3***REMOVED***>\r\n                        <Grid key=\"cartridges\" xs={12***REMOVED*** lg={4***REMOVED*** item>\r\n                            <CartridesTable cartridges={cartridgesData***REMOVED*** />\r\n                        </Grid>\r\n                        <Grid key=\"supplies\" xs={12***REMOVED*** lg={8***REMOVED*** item>\r\n                            <SuppliesEditable\r\n                                data={suppliesData***REMOVED***\r\n                                cartridges={cartridgesData***REMOVED***\r\n                                handleSupplyDelete={this.handleSupplyDelete***REMOVED***\r\n                                handleSupplyCreate={this.handleSupplyCreate***REMOVED***\r\n                                handleSupplyUpdate={this.handleSupplyUpdate***REMOVED***\r\n                            />\r\n                        </Grid>\r\n                        <Grid key=\"orders\" xs={12***REMOVED*** lg={12***REMOVED*** item>\r\n                            <OrdersTable\r\n                                data={ordersData***REMOVED***\r\n                                cartridges={cartridgesData***REMOVED***\r\n                            />\r\n                        </Grid>\r\n                    </Grid>\r\n                </Container>\r\n            </MuiThemeProvider>\r\n        );\r\n    ***REMOVED***\r\n***REMOVED***\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1***REMOVED*** is the IPv6 localhost address.\n    window.location.hostname === '[::1***REMOVED***' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5***REMOVED***|2[0-4***REMOVED***[0-9***REMOVED***|[01***REMOVED***?[0-9***REMOVED***[0-9***REMOVED***?)){3***REMOVED***$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    ***REMOVED***\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL***REMOVED***/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        ***REMOVED***);\n      ***REMOVED*** else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      ***REMOVED***\n    ***REMOVED***);\n  ***REMOVED***\n***REMOVED***\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        ***REMOVED***\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              ***REMOVED***\n            ***REMOVED*** else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              ***REMOVED***\n            ***REMOVED***\n          ***REMOVED***\n        ***REMOVED***;\n      ***REMOVED***;\n    ***REMOVED***)\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    ***REMOVED***);\n***REMOVED***\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' ***REMOVED***,\n  ***REMOVED***)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          ***REMOVED***);\n        ***REMOVED***);\n      ***REMOVED*** else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      ***REMOVED***\n    ***REMOVED***)\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    ***REMOVED***);\n***REMOVED***\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      ***REMOVED***)\n      .catch(error => {\n        console.error(error.message);\n      ***REMOVED***);\n  ***REMOVED***\n***REMOVED***\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  // <React.StrictMode>\n  <App />,\n  // </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"***REMOVED***,"sourceRoot":""***REMOVED***